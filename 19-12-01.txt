
12-01
1) posix
cli는 gui에비해 복잡하고 상호 작용체계가 다른 상황에서 간단하고 쉽게 명령입력이된다.
cli는 순서에 따라 작동되는 행동을 일정부분 컴퓨터가 대신해준다
여러 명령어를 순차적으로 진행할때 ';' 은 and 의 순서를 표시해준다 (명령어를구분하는 '구분자')
';' 은 앞의 명령이 실패하면 그명령을 넘어가고 다음명령을진행한다 > 치명적인문제를발생할수도잇음
'&&'은 앞의 명령이 실패하면 그명령에서 진행을 멈춘다 > 문제예방

*ctrl + insert : bash 에서 복사
 shift + insert : bash 에서 붙여넣기

2)git
git original 은 cli 특유의 장점을 살릴수잇다.

dir 을 git 시킬때 git init . 으로 한다. '.'은 현재dir을 의미한다

stage area 엔 git add를 사용한다 commit 되던 woriking tree에 잇던 상관없다

git diff : 마지막버전과 working tree와의 차이점을 보여준다

git reset --hard : undo, 뒤에 버전을 입력하면 그버전으로 가겟다, 돌아가겟다
git reset --soft : reset시 수정본은 그대로둔다  >>reset은 지우는거나 다름없다.

git revert "버전" : 버전을 유지하고 버전을 revert 하고 그전 commit 으로 돌아간다
                    한버전씩 역순으로 내려가야 충돌이 일어나지않는다. 건너뛰면안됨

git checkout "branch name" : 해당 branch로 돌아간다
                             >마지막 commit 상태로 돌아간다(물론 파일의내용도)
git checkout master : 최신상태로 복귀 
git commit -am "name" : a는 add, add와 commit 을 동시에 수행한다
                        하지만 적어도 최초 한번은 add해서 tracked상태로 만들어줘야한다
git commit : editor 가 뜬다. commit message를 좀더길고 세세하게 쓸수잇다.

.gitignore : 버전관리,commit관리에서 제외(사적인파일)

branch = 가지,같은뿌리 서로다른역사
master : 기본 branch. 가장큰줄기
head가 가리키는것 : 현재 우리가 속해잇는것
branch를 만들고 branch사이를이동한다는것 > 공통의 줄기를지닌 평행우주사이에서 별개로작업한다는것 >놀랍다!
git merge : branch의 병합
합치려고하는 branch 간의 공통의 조상 : base
base를 기반으로 두 이상의branch가 합된것 : merge commit
git merge "branch name" : 현재의 branch로 "branch name"을 병합한다
merge할때 현재branch말고 통합되던 branch의 log도 통합된 branch의 log에 등장한다
merge 할때 같은 파일이더라도 수정부분이 다르면 알아서 적용해준다>git의 힘!
conflict는 같은부분을 수정햇을때 git스스로 처리하지못하니 나한테 맡기는것  