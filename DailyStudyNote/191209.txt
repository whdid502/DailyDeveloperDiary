1강

unity만이 아닌 C#까지 배우는것은? : 근본적으로 내가원하는 게임을 만들수있다.  
unity만 배우는 것은 영어소설책을 베껴 그리는 느낌이다. > c#을 공부해야 이해하면서 내가원하는 기능을 unity에서 발휘할수있다.

visual studio는 옛날 단순히 메모장에서 코딩후 결과를 실행시켜야만 알수있던 수준에서 코드를 치자마자 결과나 내가 잘못한 부분, 내가 어떤일을 할수있는지, 사전외우듯이 공부를 하지않아도 작업할수있다.
> IDE프로그램을 지칭한다. 통합개발환경 > visualstudio는 IDE중의 하나이다.

프로그램을 하려면 어떤 단위로 묶어야한다.

프로젝트의 최종목적 : exe파일을 만드는것

2강

솔루션이란?

근래의 프로그램은 하나의 프로젝트로 이루어지지 않는다. ex) 와우.exe // 와우스킬에디터.exe // 와우맵에디터.exe //포토샵.exe ...

솔루션 : 이러한 여러의 프로젝트를 동시에 관리할수있게해줌 > 여러프로젝트를 하나의 이름안에서 관리할수있게해준다. 솔루션 내부에서 폴더를 만들어 프로젝트를 묶어서 관리할수있다.(실제폴더가생기진않음,프로그램안에서의 분류일뿐)

시작프로젝트는 솔루션이나 프로젝트관리에서 등록할수있다.

ctrl+f5 or f5 : 시작프로젝트의 현재소스를 exe, 실행시킨다. > 실행시 bin/debug 폴더에 exe파일이 생성된다 > 빌드라는 작업임

시작프로젝트설정

// : 프로그램에 영향을 끼치지 않는다. 보통 코드나 상황에 대해 설명할때 이용
// : 한줄주석
/* ... */ : 범위주석

현재 C#은 6.0까지 나왔지만, unity의 c#은 4.0까지만 지원한다.

문법 : 프로그램의 일부분, 미리 다 쳐져있는 남이쳐놓은 코드

코드 : 프로그램의 화면에 나오는 모든것을 처리하기위한 문장들

{} : 기능묶음의 시작과 끝
ex
system
{주인공이 걸어가는코드
 주인공이 밥먹는코드
 주인공이 말하는코드
}
 > 이것은 system이란것 안에 기능으로 묶여있다.(실제로 이렇게쓰진않는다. 예시일뿐

using : 다른사람들이 묶어둔 코드를 이용하는것, 맨위에 잇는것은 미리 쳐진코드를 미리 쓰겟다고 이야기하는것

class 

c#은 고지식한 객체지향언어 : 과격하게표현하자면 클래스의 노예, 모든길은 클래스로통한다.

객체지향 : 내가 표현하고싶은걸(객체) 클래스로 만들어서(class) 그 클래스로 객체를 만드는 프로그래밍. 객체를 기반으로 모든걸해결하기때문에 객체지향할수 밖에없는 프로그래밍

구현과 개념이 분리되지 않는다(숙련자의한해서)

using이 기반의 시작이라면, class는 프로그래밍의 시작이다.

ex) rpg의 요소에는 레벨,직업,몬스터,스킬 등등이 있다. 객체지향은 저중에서 요소들을 적절히 묶어 클래스화 한다는 것을 의미한다. 그리고 그걸 표현하는것이 class 이다.


class(클래스를 선언하기위한 키워드) level(선언된이름)
{<-클래스내용의 시작
내부내용
}<-클래스내용의 끝

class란 내가생각한 개념이 내프로그램에서 사용되어지기위한 설계도. 코딩에서는 무조건 설계도가 먼저

프로그래밍에서의 응용의 수는 무한에 가깝다. 실전에서 코딩을 해보기전까진 섣불리 시도하지말자

namespace

클래스의 이름들은 '식별자'라고한다. (식별자 = 어떠한 코드적 내용을 묶는 하나의 명칭)

식별자가 겹치면 내용은 다르더라도 사용시 문제가 생긴다. 

네임스페이스는 개념의 표현이라기보다는 개념의 분류이다. 즉, 만약 이름들을 잘 구별해서 정리해놧다면, 필요없는 문법이긴하다.

ex)
namespace apro <- apro란 이름의 별명이 붙는다는것.
{
	 class potion <- potion이란 것의 내용설명
	{  
	//내용
	}
}

