Introduction
웹 / 앱 개발을 하면 로그인 과정에서 반드시 만나게 되는 개념이 쿠키-세션이다.
이미 많은 자료와 경험으로 인해 쿠키는 나쁜 놈 세션은 좋은 놈, 로그인은 일단 세션으로 해야지라는 개념이 개발자들의 머릿속에 자리 잡혀있다.
그러나, 최근 들어 IT 인프라 구성에 많은 변화가 생겼다. 웹 기반의 서비스들은 웹과 앱을 함께 서비스하는 것을 넘어 ‘Mobile First’ 앱이 먼저라는 인식까지 생겨났다.
또한, AWS, Azure 와 같은 IaaS 클라우드 서비스가 대중화 되면서 고사양 단일 서버 아키텍쳐에서 중-저사양 다중 서버 아키텍쳐로 변화하고 있다.
이러한 상황에서 더 이상 쿠키-세션 기반 인증 아키텍쳐는 현재의 요구사항을 만족하지 못하고 있다.

현재의 요구 사항을 그나마 충족시키는 Web Token 기반 JWT에 대해서 알아보고 Web Token이 나타난 배경과 장단점에 대해서 알아보겠다.

Part 1. JWT’s Basic Information
JSON Web Token
JSON 포맷을 이용한 Web Token
Claim based Token
두 개체에서 JSON 객체를 이용해 Self-contained 방식으로 정보를 안전한게 전달
회원 인증, 정보 전달에 주로 사용
RFC 7519
Claim based ?
Claim : 사용자에 대한 프로퍼티 / 속성
토큰 자체가 정보
Self-contained : 자체 포함, 즉 토큰 자체가 정보
key / value

Part 2. Web Token
웹 토큰의 필요성
CSRF, 기존 시스템의 보안 문제
CORS, 도메인 확장시 api로서의 문제
Web, Mobile 등 다양한 클라이언트
Session 의 한계
Scale out 의 한계
REST API : REST API는 Stateless를 지향
현재 우리는?
그런데 아직도 Cookie??
쿠키 기반 로그인의 문제점은 너무 많다
Server side Session 기반으로 넘어갈 것인가?
쿠키 기반 인증은 두말 할것 없이 변경해야 하고, 보편적 Session으로 갈것인가?

Part 3. Type of Authorization
Cookie - Client Side Storage
문제점 투성이

Session - Sever Side Authorization

Cookie와 차이점은 Cookie는 정보를 클라이언트에 저장하고 Session은 정보를 서버에 저장한다.

Session Problem 1 - 서버 확장시 세션 정보의 동기화 문제

서버가 스케일아웃 돼서 여러 개가 생기면 각 서버마다 세션 정보가 저장된다.
로그인시(서버1), 새로고침(서버2) 로 접근하면 서버는 인증이 안됐다고 판단한다.

Session Problem 2 - 서버 / 세션 저장소의 부하

세션을 각 서버에 저장하지 않고 세션 전용 서버, DB에 저장해도 문제가 생긴다.
모든 요청 시 해당 서버에 조회해야 한다. DB 부하를 야기할 수 있다.

Session Problem 3 - 웹 / 앱 간의 상이한 쿠키-세션 처리 로직

기존의 Client는 웹 브라우저가 유일했다. 그러나 이제는 모바일로 접근하는 경우도 처리해야 한다.
웹 / 앱 의 쿠키 처리 방법이 다르고 또 다른 Client 가 생겨나면 쿠키-세션에 맞게 처리해야 한다.

Token - Self-contained & Stateless

앞의 문제를 해결하는 최선의 방법은 토큰이다.
토큰은 서버의 상태를 저장하지 않는다. 토큰 자체로 정보를 가지고 있기 때문에 별도의 인증서버가 필요없다. 따라서 요청을 받을 서버 자체에서 인증 프로세스를 수행할 수 있다.
또한, JSON 포맷으로 통신하기 때문에 어떤 Client 에서든 Data 통신에 JSON을 이용하면 토큰을 이용할 수 있다.

Part 4. JWT’s Architecture
JWT의 기본 구조
Header . Payload . Signature


Header
JWT 웹 토큰의 헤더 정보

typ : 토큰의 타입, JWT만 존재
alg : 해싱 알고리즘. (HMAC SHA256 or RSA). 헤더를 암호화 하는게 아니다. 토큰 검증시 사용.
{
     "alg" : "HS256",
     "typ" : "JWT"
}
위의 내용을 base64 로 인코딩한다. => eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
base 64 는 암호화된 문자열이 아니다. 같은 문자열에 대해서는 항상 같은 인코딩 문자열을 반환한다.


Payload
실제 토큰으로 사용하려는 데이터가 담기는 부분. 각 데이터를 Claim이라고 하며 다음과 같이 3가지 종류가 있다.

Reserved claims : 이미 예약된 Claim. 필수는 아니지만 사용하길 권장. key 는 모두 3자리 String이다.
iss (String) : issuer, 토큰 발행자 정보
exp (Number) : expiration time, 만료일
sub (String) : subject, 제목
aud (String) : audience,
More
Public claims : 사용자 정의 Claim.
Public 이라는 이름처럼 공개용 정보
충돌 방지를 위해 URI 포맷을 이용해 저장한다.
Private claims : 사용자 정의 Claim

Public claims 과 다르게 사용자가 임의로 정한 정보
아래와 같이 일반 정보를 저장한다.
{
    "name" : "hak",
    "age"  : 26,
}

Signature
Header와 Payload의 데이터 무결성과 변조 방지를 위한 서명
Header + Payload 를 합친 후, Secret 키와 함께 Header의 해싱 알고리즘으로 인코딩

HMACSHA256(
  base64UrlEncode(header) + "." +
  base64UrlEncode(payload),
  secret)

JWT 구조
JWT는 [Header Payload Signature] 각각 JSON 형태의 데이터를 base 64 인코딩 후 합친다.
아래와 같은 순서로 . 을 이용해 합친다.
최종적으로 만들어진 토큰은 HTTP 통신 간 이용되며, Authorization 이라는 key의 value로서 사용된다.

JWT 인증 과정

Part 5. Is JWT a Silver bullet?
그렇다면 모든 서비스들은 기존의 쿠키-세션 기반에서 웹 토큰 기반의 인증으로 변경해야할까?

JWT 의 단점 & 도입시 고려사항
Self-contained : 토큰 자체에 정보가 있다는 사실은 양날의 검이 될수 있다.

토큰 길이 : 토큰 자체 payload 에 Claim set을 저장하기 때문에 정보가 많아질수록 토큰의 길이가 늘어나 네트워크에 부하를 줄 수 있다.

payload 암호화 : payload 자체는 암호화 되지 않고 base64로 인코딩한 데이터다.
중간에 payload를 탈취하면 디코딩을 통해 테이터를 볼 수 있다.
JWE 를 통해 암호하하거나, payload에 중요 데이터를 넣지 않아야 한다.

Stateless : 무상태성이 때론 불편할 수 있다. 토큰은 한번 만들면 서버에서 제어가 불가능하다.
토큰을 임의로 삭제할 수 있는 방법이 없기 때문에 토큰 만료시간을 꼭 넣어주는게 좋다.

tore Token : 토큰은 클라이언트 side에서 관리해야하기 때문에 토큰을 저장해야한다.

Conclusion
HTTP, REST API 의 공통적인 특징은 Stateless(무상태)를 지향한다는 것이다.
Stateful, 즉 상태를 저장하는 서버는 많은 Side-effect를 발생시킬 수 있다.
또한, 서론에 말했듯이 현재의 IT 인프라 구조는 유연한 확장 가능성이 있어야 하는데 기존의 쿠키-세션 기반의 인증을 사용하면 확장 가능한 인프라를 구성하기 힘들다.
기존의 로그인 / 인증을 모두 Web Token 기반으로 변경할 수는 없지만, 앞으로 만들게 될 서비스 특히 RESTful한 API의 인증에는 JWT를 사용해보는 것이 좋을 것이라 생각한다.


---

JSON Web Token(JWT)은 앱 개발에 있어서 서버와 정보를 주고받기 위해 쓰이는 하나의 공통 인증 규약으로 IEFT 네트워킹 그룹에서 그 규약을 지정하고 관리하고 있다. 발음은 jot좉으로 한다(...) 다른 인증 토큰들과 큰 차이점은 없지만, JSON 객체를 생성하고 그걸 암호화 시킨다는 점이 뚜렷한 차별점이라고 할 수 있겠다. 보통 이 JWT를 이용해서 서버와 정보를 주고 받을 때에는 HTTP 리퀘스트 헤더에 이 토큰을 넣어서 서버에서 헤더를 분석한 후 처리를 진행한다. 따라서, 헤더 정보만 충분하다면 별도의 인증과정을 거치지 않아도 이 JWT 토큰이 그 역할을 대신한다고 볼 수 있다.

그렇다면, 이 JWT를 이용해서 웹 앱의 로그인/로그아웃 인증 정보를 관리할 수 있지 않을까? 웹에서는 보통 두가지 방법으로 로그인/로그아웃 인증 정보를 관리한다. 하나는 쿠키, 다른 하나는 세션. 쿠키는 클라이언트 컴퓨터에 정보를 저장하고, 세션은 서버 컴퓨터에 정보를 저장한다. 쿠키는 상대적으로 조작/위변조의 가능성이 높기 때문에 여러 가지 장치를 통해 쿠키 정보를 조작할 수 없게 혹은 조작하면 쓸모없어지게 만든다. 세션은 중간에 세션키를 가로채지 않는 이상 상대적으로 쿠키에 비해 안전한 편이지만, 서버의 로드밸런싱이라든가 하는 문제들을 해결하려면 꽤 많은 다른 작업들이 필요하다. 이럴 때 JWT와 쿠키를 이용하면 굳이 세션 객체에 의존하지 않아도 인증 정보를 관리할 수 있다.

아래는 ASP.NET MVC 웹사이트로 작성한 JWT 인증 예제 코드이다. 관련 코드는 이곳에서 확인할 수 있다.

https://github.com/devkimchi/JWT-Authentication
JWT 생성하기
아래 코드를 위해서는 WIF의 확장기능인 http://www.nuget.org/packages/System.IdentityModel.Tokens.Jwt NuGet 패키지가 필요하다.

var now = DateTime.UtcNow;
var tokenHandler = new JwtSecurityTokenHandler();
var symmetricKey = GetBytes("ThisIsAnImportantStringAndIHaveNoIdeaIfThisIsVerySecureOrNot!");
var tokenDescriptor = new SecurityTokenDescriptor
                          {
                            Subject = new ClaimsIdentity(new Claim[]
                                                             {
                                                               new Claim(ClaimTypes.Name, "DevKimchi"),
                                                               new Claim(ClaimTypes.Role, "User"),
                                                             }),
                            TokenIssuerName = "http://devkimchi.com",
                            AppliesToAddress = "http://jwt-sample.com",
                            Lifetime = new Lifetime(now, now.AddMinutes(30)),
                            SigningCredentials = new SigningCredentials(new InMemorySymmetricSecurityKey(symmetricKey),
                                                                        "http://www.w3.org/2001/04/xmldsig-more#hmac-sha256",
                                                                        "http://www.w3.org/2001/04/xmlenc#sha256"),
                          };
var token = tokenHandler.CreateToken(tokenDescriptor);
var tokenString = tokenHandler.WriteToken(token);

var cookie = new HttpCookie(".JWTAUTH", tokenString) { HttpOnly = true, };
symmetricKey는 인증 정보를 암호화하기 위한 키이다.
tokenDescriptor는 IETF 규약에 맞게 JSON 객체를 생성하기 위한 객체이다. 기본적으로 로그인 사용자 정보, 토큰 발행 서버, 토큰 사용 서버, 토큰 유효기간, 토큰 암호화 방법 등을 지정한다. 이 정보를 이용하여 토큰을 만들고 (token) 암호화 시킨다 (tokenString).
cookie에 이렇게 암호화된 토큰을 저장한다.
FormsAuthentication을 이용한 추가 암호화
이 부분은 굳이 하지 않아도 상관 없는 부분이긴 하지만, 마음의 평안을 얻기 위해서는 해도 된다.

기본적으로 ASP.NET MVC 웹 앱은 FormsAuthentication 객체를 이용하여 쿠키에 인증정보를 저장한다. 쿠키 정보 자체가 암호화되어 있고 서버에서 쿠키 내용을 복호화해서 사용하기 때문에, 쿠키의 위변조 위험에서 비교적 자유롭다. 하지만, 인증에 필요한 최소한의 정보만을 저장하고 있기 때문에, 로그인 유저의 권한 정보라든가 하는 추가 정보 저장을 위해서는 약간의 커스터마이징이 필요하다.

var ticket = new FormsAuthenticationTicket(
                 1,
                 model.Email,
                 now,
                 now.AddMinutes(30),
                 model.RememberMe,
                 tokenString,
                 FormsAuthentication.FormsCookiePath);

var encryptedTicket = FormsAuthentication.Encrypt(ticket);
var cookie = new HttpCookie(FormsAuthentication.FormsCookieName, encryptedTicket) { HttpOnly = true, };
ticket에 FormsAuthentication에 필요한 티켓을 생성한다. 그리고 이것을 암호화하여 encryptedTicket에 보낸다.
cooke에 이렇게 암호화된 티켓을 저장한다.
Global.asax에서 인증 정보 확인
ASP.NET의 HttpApplication 라이프사이클 파이프라인을 보면 리퀘스트를 받자마자 초반에 인증 정보를 확인하는 이벤트인 AuthenticationRequest를 Application_AuthenticationRequest 이벤트 핸들러 메소드에서 처리한다. 이 메소드를 아래와 같이 구성한다.

var jwtCookie = Request.Cookies[".JWTAUTH"];
var userData = jwtCookie.Value;

var tokenHandler = new JwtSecurityTokenHandler();
var symmetricKey = GetBytes("ThisIsAnImportantStringAndIHaveNoIdeaIfThisIsVerySecureOrNot!");
var validationParameters = new TokenValidationParameters()
                           {
                             ValidAudience = "http://jwt-sample.com",
                             ValidIssuer = "http://devkimchi.com",
                             IssuerSigningToken = new BinarySecretSecurityToken(symmetricKey)
                           };
SecurityToken securityToken;
var principal = tokenHandler.ValidateToken(userData, validationParameters, out securityToken);

Context.User = principal;
symmetricKey는 위에서 지정한 것과 같은 동일한 키이다. 이것으로 암호화된 토큰을 복호화시킬 수 있다.
validationParameters는 JWT를 검증하기 위한 키값들이다. ValidAudience와 ValidIssuer 그리고, IssuerSigningToken 값이 일치해야만 유효한 토큰으로 인정받을 수 있다.
principal 변수에 유효성 검사를 마친 인증 정보를 저장하고 이를 웹 앱의 사용자 인증 정보로 대체한다.
만약, FormsAuthentication 객체를 사용한다면 추가적인 작업이 더 필요하다.

var authCookie = Request.Cookies[FormsAuthentication.FormsCookieName];
var authTicket = FormsAuthentication.Decrypt(authCookie.Value);
var userData = authTicket.UserData;
이렇게 해서 JWT를 이용한 사용자 인증 처리에 대해 간단히 살펴보았다. 의외로 굉장히 쉽게 구현 가능하고 또한 보안적인 문제도 기존의 방법들과 별반 차이가 없어서 충분히 활용 가능한 방법이 아닐까 싶다. 특히나, API를 제공하는 앱 서버가 모바일 앱, 데스크탑 앱, 웹 앱 등을 모두 지원해야 한다면 이와 같은 방법을 통해 좀 더 손쉽게 적용 가능하지 않을까 생각한다.
