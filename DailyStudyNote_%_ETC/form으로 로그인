장고에서 Form을 얼마나 잘 다루냐가 실력을 좌우한다고 해도 과언이 아닐정도로 Form은 굉장히 중요한 모듈입니다.

​

간단하게나마 Login에 해당하는 MTV를 살펴보고 form을 어떻게 사용하는지, template tag를 어떻게 사용하는 지를 배워봅시다.

​

1. Model

from django.db import models

# Create your models here.
class Users(models.Model):
    username = models.CharField(max_length=64,verbose_name="사용자이름")
    password = models.CharField(max_length=64, verbose_name="비밀번호")
    useremail = models.EmailField(max_length=128, verbose_name="이메일")
    registered_dttm = models.DateField(auto_now_add=True, verbose_name="등록시간")

    def __str__(self):
        return self.username

    class Meta:
        db_table = "users"
        verbose_name ="사용자"
        verbose_name_plural = "사용자"
모델은 크게 설명할 내용이 없기 때문에 넘어갑니다.

​

2. Login Template

{% extends "base.html" %}
{% block content %}
<div class="row mt-5">
    <div class="col-12 text-center">
        <h1>로그인</h1>
    </div>
</div>
<div class="row mt-5">
    <div class="col-12 text-center">
        {{error}}
    </div>
</div>
<div class="row mt-5">
    <div class="col-12">
        <form method="POST" action=".">
            {% csrf_token %}
            {% for field in form %}                                                            (1)
            <div class="form-group">
                <label for="{{field.id_for_label }}">{{field.label}}</label>                   (2)
                <input type="{{field.field.widget.input_type}}" class="form-control" id="{{field.id_for_label }}"
                             placeholder="{{field.label}}" name="{{field.name}}"/>
            </div>
            {% if field.errors %}                                                              (3)
            <span style="color: red">{{field.errors}}</span>
            {% endif %}
            {% endfor %}
            <button type="submit" class="btn btn-primary">로그인</button>
        </form>
    </div>
</div>
{% endblock %}
      (1)부분부터 보시면 됩니다.

​

(1) {% for field in form %}은 view로부터 넘겨받은 iterable한 값 form을 반복문을 이용하여 field에 사용하고 있습니다.

(2) form은 아래에 나올 예정이지만 Model과 비슷하게 만들어졌으며, form에도 Users 모델과 마찬가지로 username과 password 필드가 있습니다. 따라서 form에 반복문을 돌릴 경우, field에 해당하는 값은 username 객체와 password 객체입니다.

- field.id_for_label 은 "id_username" 와 같은 값입니다.

- field.label은 form에서 지정해줄 수 있는 label 값 입니다. 지정해주지 않으면 Username으로 나옵니다.

- field.field.widget.input_type 또한 form에서 지정해준 widget값을 따른다는 의미입니다.

- field.name은 form에서 이름 정해준 username, password 그 자체입니다.

​

(3) {% if field.errors %} 는 조건문의 template tag입니다. 만약 username과 password에서 에러(값이 없거나, 비밀번호가 틀렸거나, 아이디가 존재하지 않거나)가 발생한다면 빨간색으로 에러 문구를 출력하는 코드입니다.

​

3. Form의 구조

​

도대체 Form이 무엇인지 확인해봅시다.

from django import forms
from .models import Users
from django.contrib.auth.hashers import check_password
class LoginForm(forms.Form):                                  (1)
    username = forms.CharField(                               (2)
        error_messages={                                      (3)
            'required': '아이디를 입력해주세요'
        },
        max_length=32, label="사용자이름")                     (4)

    password = forms.CharField(
        error_messages={
            'required': '비밀번호를 입력해주세요'
        },
        widget=forms.PasswordInput, label="비밀번호")           (5)

    def clean(self):                                           (6)
        cleaned_data = super().clean()
        username = cleaned_data.get('username')
        password = cleaned_data.get('password')

        if username and password :
            try:
                user = Users.objects.get(username=username)
                if not check_password(password, user.password):
                    self.add_error('password', '비밀번호를 틀렸습니다.')     (7)
                else:
                    self.user_id = user.id                                 (8)
            except Exception:
                self.add_error('username', '존재하지 않는 아이디 입니다.')
(1) LoginForm이라는 클래스를 정의하기 위해 forms.Form을 상속합니다. 상속을 함으로써 유효성검사, 에러메시지 관리 등이 용이해집니다.

(2) Form 클래스의 Field를 만드는 방법은 Model과 유사합니다.

(3) error_messages는 추후에 보여줄 에러 메시지를 지정할 수 있습니다. 'required'는 반드시 입력해야 하는 값이 입력되지 않았을 때 발생하는 에러입니다.

(4) Model과 마찬가지로 max_length를 지정할 수 있으며, 위의 Templates에서 얘기했듯 label 값을 직접 명시할 수 있습니다.

(5) 패스워드를 CharField로만 구현한다면 웹 사이트에서 비밀번호 은닉 기능이 없습니다. 따라서 PasswordInput이라는 위젯을 사용합니다.

(6) clean() 함수는 유효성 검사를 위해 존재합니다. 유효성 검사란, 비밀번호가 일치하는지 값이 비워져있는지, 존재하는 아이디인지 등을 검사할 수 있습니다. Form 클래스는 자체적으로 값이 비워져있는지를 체크해줍니다. 따라서 저희는 존재하는 아이디인지, 비밀번호가 일치하는지를 확인해주어야 합니다.

(7) 에러가 발생한 경우, 해당하는 'field'에 에러 메시지를 삽입할 수 있습니다.

(8) Form 객체의 user_id 필드에 user.id를 삽입합니다. (추후에 view에서 session으로 사용하기 위해 사용합니다.)

4. View 구현

from django.shortcuts import render, redirect, HttpResponse
from .models import Users
from django.contrib.auth.hashers import make_password, check_password
from .forms import LoginForm

def login(request):
    if request.method =="POST":
        form = LoginForm(request.POST)                             (1)
        if form.is_valid():                                        (2)
            request.session['user'] = form.user_id                 (3)
            return redirect('/')
    else:
        form = LoginForm()                                         (4)

    return render(request, 'login.html', {'form':form})            (5)
(1) 만약 POST 방식으로 데이터가 넘어왔다면, username과 password 필드가 있습니다. 이 값을 LoginForm에 넘겨주어 객체를 생성합니다.

(2) form.is_valid()는 유효성을 검사해줍니다. 자체적으로 값이 비워져있는지 검사를 해주며, 내부적으로 form.clean()을 실행합니다. 즉, 위에서 정의한 clean() 메서드가 실행되겠지요?

(3) 유효성 검사를 모두 통과하면, 아이디와 비밀번호까지 일치하다는 것이기 때문에 세션의 값을 form.user_id로 삽입합니다.

(4) "GET" 방식으로 요청이 왔다면, 비어있는 LoginForm() 객체를 생성합니다.

(5) 만약 "GET" 방식이라면 비어있는 LoginForm을 보여줄 것이고 POST 방식인 경우 유효성 검사에서 탈락한 경우이기 때문에 에러메시지를 함께 보여줄 것입니다.
