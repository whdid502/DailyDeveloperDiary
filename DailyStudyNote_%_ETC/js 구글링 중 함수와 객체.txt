자바스크립트에서 this 란 ?
The object that is executing the current function.
즉 현재 함수를 부른 객체가 누구인지를 나타낸다. 함수가 어떻게 호출되냐에 따라서 this가 결정된다.

먼저 함수의 호출 패턴에 대해서 알아보자.
함수는 여러가지의 패턴으로 실행된다.

일반 함수 실행 (Simple Function Invocation)
함수가 object의 member function 일때, 즉 method 일때
bind method를 사용하여 호출했을 때
함수가 Constructor function으로 사용될 때
Function.prototype.call(this, argList)을 이용한 함수 호출
먼저 기본적인 함수 호출이 내부적으로 어떻게 이루어지는 지에 대해서 알아보자. 일반 함수는 Function constuctor에 의해서 만들어지고 함수 호출(invocation)은 Function의 call method에 의해 이루어진다.

Function의 call method은 아래대로 동작한다.

처음 부터 끝까지 parameter들로 argument list, argList 를 만든다.
첫번째 parameter는 thisValue 이다.
this를 thisValue로 설정하고 argList를 argument list로 설정하면서 함수를 호출한다.
함수를 ()를 사용하여 호출하는 일반적인 경우에서의 this는 global 객체인 window 이다.
따라서 call method를 이용하여 표현해보면 call의 첫번째 parameter를 window로 설정하여 호출하는 것과 같다.
strict mode에서는 다르다. strict mode에서 함수 호출한 경우는 this가 undefined이다.
person 객체 안의 hello 메소드를 person.hello('world') 로 실행시킬 수 있다.
person.hello('world')는 call 함수로 표현했을 때 this가 person, argList는 'world'로 하여 나타낼 수 있고 즉 this는 호출한 객체인 걸 알 수 있다.
한번 더 짚고 넘어가자. this는 고정값이 아니라 호출될 때 결정되며 caller가 누군지에 따라 달라진다.
 bind 메소드를 이용한 경우,Function.prototype.bind
function.bind(obj) 메소드는 function과 같은 body, scope를 가지며 첫번째 파라미터로를 this로 고정해버리는 새로운 함수를 만든다. 즉 함수가 어디서 사용되었는지와 상관없이 this가 고정된다.

bind를 쓰는 경우를 아래와 같이 정의해보았다.

객체 안에 정의된 method를 전역 컨텍스트(다른 문맥)에서 사용하고 싶을 때
전역 컨텍스트(다른 문맥)에서 사용하지만 method를 객체가 부른 것 처럼 만들고 싶을 때

JavaScript의 함수를 1급 객체라고 표현하기도 한다. 1급 객체는 CS분야에서 자주 쓰이는 용어로, 아래와 같은 특징을 갖는다.



⊙ 변수나 데이터 구조안에 담을 수 있다. 



⊙ 파라미터로 전달 할 수 있다. 



⊙ 반환값(return value)으로 사용할 수 있다. 



⊙ 동적으로 프로퍼티 할당이 가능하다.



 JavaScript의 함수는 위의 조건을 모두 만족한다. JavaScript의 함수는 입력값을 받아 결과를 반환하는 구조로, JAVA와 같은 언어의 함수와 비슷하지만 함수 자체가 '값'으로 취급(값으로 취급되어야 위와 같은 특징을 만족할 수 있다.)된다는 특징이 있다.





1. 함수정의

 JavaScript의 함수 선언 방식은 크게 3가지로 나뉜다. 예제를 통해 알아보자.

12
함수 선언문 방식.
function add(a,b) {
    return a+b;
} 
 
함수 표현식 방식.
var add = function (a,b) {
    return a+b;
} 
 
함수 생성자 방식. 거의 안씀.
new Function('a','b','return a+b');
 먼저 예제의 첫번째인 함수 선언문 방식은 C나 JAVA에서 함수를 선언하는 것과 비슷하다고 생각하면 된다. 그리고 함수 표현식 방식은 JavaScript에서 가장 많이 사용되는 함수 정의 방식으로, 익명함수를 생성하여 변수에 할당하는 형태를 띄고있다. 
 한편, 함수 생성자 방식은 Function이라는 생성자를 사용하여 함수를 생성하는 방식으로, 불편하여 거의 사용하지 않는다. 문법은 아래와 같다.
2. 함수호출
JavaScript에서는 함수를 다양하게 호출할 수 있다. C나 JAVA와 같은 방식으로 함수를 호출할 수도 있고 다른 방식도 있다. 예제를 통해 알아보자.
콜백함수의 호출은 이벤트핸들러가 담당하며, 특정 이벤트가 발생했을 때 등록된 콜백함수를 호출하는 방식이다. 이는 비동기 프로그래밍에서 자주 쓰이는 기법이며, Node.js와 각종 프론트엔드 프레임워크에서 사용된다.
즉시실행함수는 함수를 선언과 동시에 호출하는 함수를 뜻한다. 최초 한 번만 실행할 내용을 즉시실행함수에 넣어 쓰면 좋다.
3. 함수도 객체다.
함수도 객체이므로 일반적인 객체의 기능을 모두 쓸 수 있다. 그리고 추가적으로 함수의 기능(호출 됐을 때 지정된 로직을 수행함.)을 수행할 수 있다. 그런데 함수에는 일반 객체와 달리 함수만의 표준 프로퍼티가 정의되어있다.
객체는 관련된 데이터와 함수(일반적으로 여러 데이터와 함수로 이루어지는데, 객체 안에 있을 때는 보통 프로퍼티와 메소드라고 부릅니다)의 집합입니다. 예제를 통해서 실제 객체가 무엇인지 알아보도록 합시다.
시작하기에 앞서, oojs.html 파일의 복사본을 로컬 환경에 만듭니다. 이 파일은 우리가 작성한 소스코드를 포함하는 작은 <script> 요소를 포함하고 있습니다. 우리는 기본 객체 문법을 탐구하기 위한 기반으로 이 파일을 사용할 것입니다. 예제를 제대로 따라하려면  반드시 개발자 도구 JavaScript 콘솔을 열어두고, 몇몇 명령어를 직접 입력할 준비가 되어있어야 합니다.
여타 JavaScript 의 요소들과 마찬가지로, 객체를 생성하는 것은 변수를 정의하고 초기화하는 것으로 시작합니다.