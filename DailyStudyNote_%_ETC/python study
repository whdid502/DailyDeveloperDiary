python을 설치한다는것 > js나 jquery와 다르게 python을 컴퓨터가 알아들을 수 있게 해준다는것.(일종의 번역)
pycharm은 python을 편하게 쓰기 위한 ide입니다.

자료형
 정수 : 소수점 X
  ex) 7, 10
 실수 : 소수점 O
  ex) 10.2, 87.5 등등

문자열
  문자열을 만들기 위해서는 '나 "로 글자를 감싸면 됩니다.

여러 문자열들 연결하기
 +로 하면 됩니다.

문자열 반복하기
 *로 하면 됩니다.
data = "Hello! \n" # \n은 줄을 바꾸라는 의미
print '---- Result ---'
print data * 5
---- Result ---
Hello!
Hello!
Hello!
Hello!
Hello!

문자열 슬라이싱
파이썬 내부적으로 문자열은 배열로 되어 있어서, index를 가지고 특정 자리의 문자열만 가져올 수 있습니다.

H e l l o _ W o r l d
0 1 2 3 4 5 6 7 8 9 10

 문자열 가져오기

data = "Hello World"
print '---- Result ---'
print data
print data[0] // 'H'
print data[3] // 'l'

 연속적으로 가져오기 [시작위치:종료위치]
시작위치를 비우면 맨 처음부터, 종료위치를 비우면 맨 마지막까지란 의미

print data[0:4] // 'Hell'
print data[:5] // 'Hello'
print data[6:] // 'World'
print data[-1] // 'd'

문자열 포맷팅
여러개의 문자를 합칠때 매번 +를 이용해서 하는건 불편해서 포맷팅이 제공이 됩니다

data1 = "Hi %s!" % "Alex" // 'Hi 1!'
data2 = "Hi %s!" % "Anna" // 'Hi Anna!'
data3 = "Hi %s and %s!" % ("Alex", "Anna") // 'Hi Alex and Anna!'

 문자열 함수
len(문자열) :	문자열의 길이 반환
count(찾을 글자) :	문자열안에 찾을 글자 개수 반환
index(찾을 글자) :	찾을 글자의 위치 반환
upper() :	문자열 대문자로 바꾸기
lower() :	문자열 소문자로 바꾸기
strip() :	양쪽 공백 지우기
lstrip() :	왼쪽 공백 지우기
rstrip() :	오른쪽 공백 지우기
replace(바꿔야 할 글자, 바꿀 글자) :	문자열 개수 세기
split(구분자) :	구분자를 기준으로 나눈다, 없으면 공백으로 나눠서 리스트로 반환

리스트
리스트는 여러개의 자료형을 담을수 있는 배열입니다.

구조는 다음과 같이 되어 있습니다.

리스트명 = [요소1, 요소2, 요소3, ...]

아래와 같이 리스트 안에 리스트가 들어갈 수도 있습니다.

   1      2        3    [4,5,6]
list[0] list[1] list[2] list[3]

리스트 연산하기
리스트 역시 +나 *와 같은 연산자를 이용할 수 있습니다.

# coding=utf-8
list1 = [1, 2, 3]
list2 = [4, 5, 6]

print list1 + list2  // [1, 2, 3, 4, 5, 6]
print list1 * 2 // [1, 2, 3, 1, 2, 3]

리스트안의 특정 값 바꾸기
특정 인덱스를 불러서 값을 대입해주면 됩니다.

list = [1, 2, 3]

print list // [1, 2, 3]

list[1] = 10 # 여기서 2 -> 10으로 바꿔줌

print list // [1, 10, 3]

리스트 함수
append(추가할 값) :	리스트에 맨 뒷부분에 추가할 값을 추가
sort() :	리스트 정렬
index(찾을 값) :	리스트에서 찾을 값의 위치를 반환
insert(넣을 위치, 넣을 값) :	리스트에 넣을 위치에 넣을 값을 넣어준다.
remove(삭제할 값) :	리스트에서 삭제할 값을 찾아서 삭제 (가장 먼저 나온 값)
count(찾을 값) :	리스트에 찾을 값이 몇 개있는지 개수를 세서 반환
extend(확장할 리스트) :	리스트에 확장할 리스트를 붙임

튜플
튜플(tuple)은 몇 가지 점을 제외하곤 리스트와 거의 비슷하며 리스트와 다른 점은 다음과 같다.

            리스트	                    튜플
괄호	      [ and ]	                 ( and )
수정	생성, 삭제, 수정 가능	          수정 불가

결론) 만약 값이 변경이 되면 안될때는 튜플을 쓰고 변화가 필요하면 리스트를 사용한다

그 외에는 기존의 리스트와 동일하게 슬라이싱부터 +, * 연산등은 동작합니다.

딕셔너리
{Key1:Value1, Key2:Value2, Key3:Value3 ...}
Key와 Value의 쌍 여러 개가 {과 }로 둘러싸여 있다. 각각의 요소는 Key : Value 형태로 이루어져 있고 쉼표(,) 로 구분되어 있다.

※ Key는 변하지 않는 값을 사용하고, Value에는 변하는 값과 변하지 않는 값 모두 사용할 수 있다.

leebokyung = {'name':'bokyung', 'phone':'01011111111', 'birth': '1205'}

print leebokyung // {'phone': '01011111111', 'name': 'bokyung', 'birth': '1205'}
print leebokyung['name'] // bokyung
print leebokyung['phone'] // 01011111111
print leebokyung['birth'] // 1205

# 추가하기 leebokyung['age'] = 20
print leebokyung // {'phone': '01011111111', 'age': 20, 'name': 'bokyung', 'birth': '1205'}

# 같은 key에 추가하기 leebokyung['age'] = 25
print leebokyung // {'phone': '01011111111', 'age': 25, 'name': 'bokyung', 'birth': '1205'}

# 삭제하기 del leebokyung['phone']
print leebokyung // {'age': 25, 'name': 'bokyung', 'birth': '1205'}

# Key만 출력하기
print leebokyung.keys() // ['age', 'name', 'birth']

# 값만 출력하기
print leebokyung.values() // [25, 'bokyung', '1205']

집합 자료형
집합(set)은 파이썬 2.3부터 지원되기 시작한 자료형으로, 집합에 관련된 것들을 쉽게 처리하기 위해 만들어진 자료형이다.

집합 자료형은 다음과 같이 set 또는 { and }를 이용해 만들 수 있다.

set1 = {1, 2, 3}
set2 = set("Hello")

print set1 // set([1, 2, 3])
print set2 # 중복을 허용하지 않음 // set(['H', 'e', 'l', 'o'])

집합 자료형의 특징
 중복을 허용하지 않는다.
 순서가 없다(=인덱싱을 사용할 수 없다).

집합 자료형 활용하는 방법 - 교집합, 합집합, 차집합 구하기
 set 자료형이 정말 유용하게 사용되는 경우는 다음과 같이 교집합, 합집합, 차집합을 구할 때이다.

 우선 다음과 같이 2개의 set 자료형을 만든 후 따라 해보자. s1은 1부터 6까지의 값을 가지게 되었고, s2는 4부터 9까지의 값을 가지게 되었다.

 set1 = set([1, 2, 3, 4, 5, 6])
 set2 = set([4, 5, 6, 7, 8, 9])

 print set1 & set2 // print set1.intersection(set2) # 교집합  // set([4, 5, 6])

 print set1 | set2 // print set1.union(set2) # 합집합 // set([1, 2, 3, 4, 5, 6, 7, 8, 9])

 print set1 - set2 // print set1.difference(set2) # 차집합 // set([1, 2, 3])

 if문
모든 프로그래밍에서 가장 많이 쓰는 것중에 하나라고 생각하는 if문은 조건을 주고 참(=true)일때와 거짓(=false)일때로 분기할때 사용합니다.

다른 언어에서는 구분을 블록('{', '}'로 하지만 파이썬은 탭으로 합니다.)

기본 포맷
if 조건:
    조건이 만족할때 들어오는 명령어
elif 조건2:
    조건2가 만족할때 들어오는 명령어
else
    조건이 만족하지 않을때 들어오는 명령어

예제
a = 8
b = 10

if a > b:
    print "a is larger than b"
else:
    print "b is larger than a" // b is lager then a

여기서 주의해야 할 점은 조건문에서 :와 들여쓰기입니다

비교 연산자
a > b :	a가 b보다 크다
a < b :	a가 b보다 작다
a <= b :	a가 b보다 크거나 같다
a <= b :	a가 b보다 작거나 같다
a == b :	a와 b는 같다
a != b :	a와 b는 같지 않다

논리 연산자
조건1 and 조건2 :	조건1과 조건2가 모두 만족해야 True
조건1 or 조건2 :	조건1이나 조건2 둘중 하나만 만족해도 True
not 조건 :	조건이 만족하지 않아야 True

포함 연산자 (임의로 지은 이름)
특정 값이 리스트나, 튜플, 문자열 등의 포함이 되어 있으면 True를 반환

data in 리스트 :	data가 리스트에 포함되어 있으면 True
data in 튜플 :	data가 튜플에 포함되어 있으면 True
data in 문자열 :	data가 문자열에 포함되어 있으면 True

pocket = ['paper', 'cellphone', 'money']
if 'money' in pocket:
    print("택시를 타고 가라")
else:
    print("걸어가라") // 택시를 타고 가라

while문
while문은 조건문이 True인 동안은 끊임없이 반복을 해주는 구문입니다.

while문 기본 구조
while 조건문:
    수행할 명렁어
    ...

예제
index = 0
while index <= 10:
    print index
    index = index + 1
// 0
   1
   2
   3
   4
   5
   6
   7
   8
   9
   10

연속적으로 증감하는 법
Java	Python	줄이지 않은 식
a++	  a+=1     a = a + 1
a–	  a-=1     a = a - 1

while문 강제로 빠져나가기 (=break)
반복문(while문이나 for문)에서 break를 만나면 강제로 바깥으로 나가게 됩니다

index = 0
while index <= 10:
    print index

    if index == 5:
        break

    index = index + 1

// 0
   1
   2
   3
   4
   5

현재 돌고있는 순번만 건너뛰기 (=continue)
break와 달리 반복문 자체를 나가는게 아니라 해당 cycle만 건너뛰게 됩니다.

index = 0
while index < 10:
    index = index + 1

    if index % 2 == 0:
        continue

    print index

//1
  3
  5
  7
  9

for문
while문과 같은 반복문 중에 하나로 개인적으로 if문과 더불어 가장 많이 쓰는 문법입니다.

for문 기본 구조
 for 변수 in 리스트(또는 튜플, 문자열):
     수행할 명령어 # 변수 사용할때     ...
 for _ in 리스트(또는 튜플, 문자열):
     수행할 명령어 # 변수 사용하지 않을때     ...

scores = [90, 25, 67, 45, 80]

for score in scores:
     print score

// 90
   25
   67
   45
   80

함수
함수는 자주 사용되는 코드를 함수라는 형태로 만듦으로써 반복된 작업과 기하급수적으로 증가하는 코드량을 줄일 수 있습니다.

함수 구조
def 함수이름(매개 변수): 처리 명령어 return 반환 값

함수 타입 #1 (매개변수: X, 리턴값: X)
def printMyName():
    print 'Jungwoon'

printMyName() // Jungwoon

함수 타입 #2 (매개변수: O, 리턴값: X)
def calculatePlus(a, b):
    print "Sum is %d" % (a + b)

calculatePlus(19, 32) // Sum is 51

함수 타입 #3 (매개변수: X, 리턴값: O)
def getMyBirthDay():
    return "12.05."

print 'My birth is %s' % getMyBirthDay() // My birth is 12.05.

함수 타입 #4 (매개변수: O, 리턴값: O)
def plus(a, b):
    return a + b

print 'Sum is %s' % plus(12, 78) // Sum is 90

입력값이 정해지지 않았을때 (파이썬에 있는 특별한 기능)
def plus(*values):
    tot = 0

    for value in values:
        tot = tot + value

    return tot

print 'Sum is %s' % plus(12, 78, 23, 44, 634) // Sum is 791

return의 다른 사용법 (return의 의미)
def sayNickname(nickname):

    if nickname == 'idiot':
        return

    return nickname


print 'My Nickname is %s' % sayNickname("Pretty") // My Nickname is Pretty
print 'My Nickname is %s' % sayNickname("idiot") // My Nickname is None

여러개의 리턴값을 받기 (튜플 사용)
def calculate(a, b):
    return a + b, a * b

print calculate(12, 23) # 결과값이 여러개일때는 '한 개'의 튜플로 받는다 // (35, 276)
print calculate(12, 23)[0] # 더하기한 결과 값만 가져오기 // 35
print calculate(12, 23)[1] # 곱하기한 결과 값만 가져오기 // 276

매개변수의 default값 설정하기
def checkBreakfast(name, room, meal=True):
    print "Name : %s" % name
    print "Room : %d" % room

    if meal:
        print "include breakfast"
    else:
        print "no breakfast"

checkBreakfast("Jungwoon", 302)
print '--------------'
checkBreakfast("Bokyung", 303, False)

//

Name : Jungwoon
Room : 302
include breakfast
--------------
Name : Bokyung
Room : 303
no breakfast

default를 준 매개변수 뒤에 따라오는 매개변수도 항상 default 값을 설정해야 한다
