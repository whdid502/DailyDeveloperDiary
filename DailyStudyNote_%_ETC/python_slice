파이썬 슬라이싱(slicing)이란?
슬라이싱(slicing) or 슬라이스(slice) : 연속적인 객체들에(예 : 리스트, 튜플, 문자열) 범위를 지정해 선택해서 객체들을 가져오는 방법 및 표기법을 의미합니다.
슬라이싱을 하면 새로운 객체를 생성하게 됩니다. 즉, 일부분을 복사해서 가져온다고 생각하면 됩니다.

기본 형태
a라는 연속적인 객체들의 자료구조(예 : 리스트, 튜플, 문자열)가 있다고 가정을 했을 때 기본 형태는 아래와 같습니다.

a[start : end : step]

각각 start, end, step 모두 양수와 음수를 가질 수 있습니다.
start : 슬라이싱을 시작할 시작위치입니다.
end : 슬라이싱을 끝낼 위치로 end는 포함하지 않습니다!
step : stride라고도 하며 몇개씩 끊어서 가져올지를 정합니다. (옵션)


인덱스 값들의 위치
위에 설명한 대로 값들을 양수 혹은 음수를 가질 수 있습니다.
양수 : 연속적인 객체들의 제일 앞에서부터 0을 시작으로 번호를 매깁니다.
음수 : 연속적인 객체들의 제일 뒤에서부터 -1을 시작으로 번호를 매깁니다.
아래는 ['a', 'b', 'c', 'd', 'e']라는 리스트가 있을 때 인덱스를 의미합니다.
a = ['a', 'b', 'c', 'd', 'e']

// Index References
-------------------------------
|  a  |  b  |  c  |  d  |  e  |
-------------------------------
|  0  |  1  |  2  |  3  |  4  |          // 양수의 경우
-------------------------------
| -5  | -4  | -3  | -2  | -1  |          // 음수의 경우
-------------------------------


예제
기본적으로 모든 예제들은 a = ['a', 'b', 'c', 'd', 'e']의 리스트를 통해서 작성하겠습니다.


특정 시작위치부터 끝까지 가져오기
a[ start : ]

>>> a = ['a', 'b', 'c', 'd', 'e']
>>> a[ 1 :  ]
['b', 'c', 'd', 'e']


>>> a = ['a', 'b', 'c', 'd', 'e']
>>> a[ -3 :  ]
['c', 'd', 'e']



시작점부터 특정 위치까지 모두 가져오기
a[ : end ]

>>> a = ['a', 'b', 'c', 'd', 'e']
>>> a[  : 2 ]
['a', 'b']


>>> a = ['a', 'b', 'c', 'd', 'e']
>>> a[  : -1 ]
['a', 'b', 'c', 'd']



특정 위치부터 특정 위치까지 모두 가져오기
a[ start : end ]

>>> a = ['a', 'b', 'c', 'd', 'e']
>>> a[ 2 : 4 ]
['c', 'd']


>>> a = ['a', 'b', 'c', 'd', 'e']
>>> a[ -4 : -2 ]
['b', 'c']


>>> a = ['a', 'b', 'c', 'd', 'e']
# 인덱스 1 ~ 3까지를 거꾸로 가져오기
>>> a[ 3 : 0 : -1]
['d', 'c', 'b']



step의 예제
a[ start : end : step ]
step이 양수일 때 : 오른쪽으로 step만큼 이동하면서 가져옵니다.
step이 음수일 때 : 왼쪽으로 step만큼 이동하면서 가져옵니다.

>>> a = ['a', 'b', 'c', 'd', 'e']
# 2칸씩 이동하면서 가져옵니다.
>>> a[ : : 2 ]
['a', 'c', 'e']


>>> a = ['a', 'b', 'c', 'd', 'e']
# 3칸씩 이동하면서 가져옵니다.
>>> a[ -5 : : 3 ]
['a', 'd']


>>> a = ['a', 'b', 'c', 'd', 'e']
# 전체를 거꾸로 가져옵니다.
>>> a[ : : -1 ]
['e', 'd', 'c', 'b', 'a']


>>> a = ['a', 'b', 'c', 'd', 'e']
>>> a[ 3 : : -1 ]
['d', 'c', 'b', 'a']
