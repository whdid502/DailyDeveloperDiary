그렇다면 REST API란 무엇일까요? 그 전에 먼저 REST에 대해 알아보겠습니다.
REST(REpresentational State Transfer) :
“Representational State Transfer라는 용어의 약자로서 2000년도에 로이 필딩 (Roy Fielding)의 박사학위 논문에서 최초로 소개됨. 로이 필딩은 HTTP의 주요 저자 중 한 사람으로 그 당시 웹(HTTP) 설계의 우수성에 비해 제대로 사용되어지지 못하는 모습에 안타까워하며 웹의 장점을 최대한 활용할 수 있는 아키텍처로써 REST를 발표”
좀 더 설명하면 REST는 HTTP기반으로 필요한 자원에 접근하는 방식을 정해놓은 아키텍쳐입니다.
그렇다면 여기서 말하는 자원은 무엇일까요?
자원은 저장된 데이터(DBMS)는 물론, 이미지/동영상/문서(pdf 등)와 같은 파일, 서비스(이메일 전송, 푸쉬 메시지 등)를 모두 포함합니다.
그리고 REST API는 REST를 통해 서비스 API를 구현한 것을 말합니다.
REST에 대한 전반적인 이해가 있어야 REST API에 대해 알 수 있으므로 REST에 우선하여 설명을 진행하겠습니다.
REST에는 4개의 속성이 존재하는데요,
속성1: 서버에 있는 모든 resource는 각 resource 당 클라이언트가 바로 접근 할 수 있는 고유 URI가 존재합니다.
속성2: 모든 요청은 클라이언트가 요청할 때마다 필요한 정보를 주기 때문에 서버에서는 세션 정보를 보관할 필요가 없습니다. 그렇기 때문에 서비스에 자유도가 높아지고 유연한 아키텍쳐 적응이 가능합니다.
속성3: HTTP 메소드를 사용한다는 점입니다. 모든 resource는 일반적으로 http 인터페이스인 GET, POST, PUT, DELETE 4개의 메소드로 접근 되어야한다는 것입니다.
속성4: 서비스 내에 하나의 resource가 주변에 연관 된 리소스들과 연결되어 표현이 되어야 한다는 점입니다.
REST의 구성요소에 대해 살펴보면 REST는 자원(resource), method, message 세 가지로 구성되어 있습니다.
Resource
REST에서는 자원에 접근 할 때 URI(Uniform Resource Identifier)로 하게 됩니다.
URI는 자원의 위치를 나타내는 일종의 식별자인데, URI설계시 지켜야하는 설계규칙에 대해 살펴보겠습니다.
0. ‘/’의 쓰임새
(1) 슬래시 구분자(/)는 계층 관계를 나타내는 데 사용
-ex: http://www.happy-zoo/animals/dogs/john
해당하는 사이트에서 ‘john’ 개의 정보를 찾을 때 ‘happy-zoo’부터 하위 소속들을 거쳐서 ‘john’까지 도달하는 구조임을 알 수 있습니다.
(2) 그렇기 때문에 URI 마지막 문자로 슬래시(/)를 포함하지 않는다.
URI를 이루는 resource들은 동사보다는 명사로 이루어져야합니다.
자원의 정보를 표현해야 하는 URI는 동사보다는 명사로 구성되어야 합니다.
1–1. resource간의 관계를 표현하는 방법
REST 리소스 간에는 연관 관계가 있을 수 있고, 이런 경우 다음과 같은 표현방법으로 사용합니다.
/리소스명/리소스 ID/관계가 있는 다른 리소스명
ex)    GET : /users/{userid}/devices (일반적으로 소유 ‘has’의 관계를 표현할 때)
만약에 관계명이 복잡하다면 이를 서브 리소스에 명시적으로 표현하는 방법이 있습니다. 예를 들어 사용자가 ‘좋아하는’ 디바이스 목록을 표현해야 할 경우 다음과 같은 형태로 사용될 수 있습니다.
GET : /users/{userid}/likes/devices (관계명이 애매하거나 구체적 표현이 필요할 때)
2. URI에서는 ‘_’(언더바)보다는 ‘-’(하이픈)을 권장합니다.
가독성이 중요한 ‘_’은 resource 해석에 혼란을 줄 수 있기 때문입니다.
3. URI 경로에는 소문자가 적합합니다.
URI 경로에 대문자 사용은 피하도록 해야 합니다. 대소문자에 따라 다른 리소스로 인식하게 되기 때문입니다. RFC 3986(URI 문법 형식)은 URI 스키마와 호스트를 제외하고는 대소문자를 구별하도록 규정하기 때문입니다.
4. 파일 확장자는 URI에 포함시키지 않는다.
http://restapi.example.com/members/soccer/345/photo.jpg (X)
REST API에서는 메시지 바디 내용의 포맷을 나타내기 위한 파일 확장자를 URI 안에 포함시키지 않습니다. Accept header를 사용하도록 해야합니다.
GET / members/soccer/345/photo HTTP/1.1 Host: restapi.example.com Accept: image/jpg
HTTP 메소드
다음은 HTTP 메소드에 대한 설명입니다. 자원에 접근할 때 어떤 성격의 요청인지 HTTP 메소드가 알려줍니다. 그 종류로는 GET, POST, PUT, DELETE가 존재합니다.

Endpoint

메소드는 같은 URI들에 대해서도 다른 요청을 하게끔 구별해주는 항목이 있습니다. 이것을 Endpoint라고 하는데요. 위의 표에서 ‘http://api.domain.com/books/1’ URI에 대해 ‘GET’, ‘PUT’, ‘DELETE’ 메소드에 따라 다른 요청 성격을 띄고 있는 것을 알 수 있습니다.
메시지
메시지는 HTTP header와 body, 응답상태코드로 구성되어 있으며 header와 body에 포함된 메시지는 메시지를 처리하기 위한 충분한 정보를 포함합니다.
Body
자원에 대한 정보를 전달(데이터 포맷: JSON/ XML/ 사용자 정의 포맷)
Header
HTTP 바디에 어떤 포맷으로 데이터가 담겼는지 정의합니다.
요청 HTTP 헤더는 ‘Accept’ 항목으로 응답 HTTP 헤더는 ‘Content-type’으로 컨텐츠 타입을 설명합니다.
응답상태코드
응답상태코드를 통해 리소스 요청에 대한 응답을 할 수 있습니다.

지금까지 REST의 속성과 구성요소를 설명했습니다.
그렇다면 REST의 장/단점은 무엇일까요?
장점
언어와 플랫폼에 독립적이다.
SOAP(다른 통신방식)보다 개발이 쉽고 단순하다.
REST가 지원하는 프레임워크나 언어등 도구들이 없어도 구현이 가능하다.
기존 웹 인프라를 사용가능하다. HTTP를 그대로 사용하기 때문에 그런 것이다.
단점
HTTP 프로토콜만 사용이 가능하다.
p2p 통신 모델을 가정했기 때문에 둘 이상을 대상으로 하는 분산환경엔 유용하지 않다.
보안, 정책등에 대한 표준이 없기 때문에 관리가 어렵고 이러한 부분까지 고려해서 구현 할 경우 설계나 구현에서 좀 더 어려움을 갖는다.
그렇다면 REST가API로써 어떻게 쓰일까요?
API를 설명 할 때 웹서비스와 특정 기술을 연결해주는 징검다리 역할이라고 말을 했었는데요, REST API도 똑같습니다.
예를들면 카카오 developer에 있는 카카오 로그인 프로그램을 자신의 웹서비스에 구현하고자 한다면 카카오에서 제공하는 로그인 API를 사용하면 됩니다. 이때 방법으로써 REST가 쓰이는 것이 REST API가 되는 것이죠.
웹서비스에서 로그인 데이터에 필요한 부분들을 REST 방식(URI형식으로 request)으로 카카오 데이터 베이스에 요청하는 식으로 작동하는 것이죠. 정말 간단하게 구현이 가능해서 REST API는 웹에서 일반적으로 사용되는 API라고 볼 수 있습니다.
32
