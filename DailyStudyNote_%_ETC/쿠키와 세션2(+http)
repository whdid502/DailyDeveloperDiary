1. HTTP의 특징과 쿠키와 세션을 사용하는 이유

서버와 클라이언트가 통신을 할 때 마다 서버는 클라이언트가 누구인지 인증을 계속해야 합니다.

그 이유는 HTTP 프로토콜이 connectionless,  stateless한 특성이 있기 때문입니다.

Connectionless
클라이언트가 요청을 한 후 응답을 받으면 그 연결을 끊어 버리는 특징
Stateless
통신이 끝나면 상태를 유지하지 않는 특징
쿠키와 세션은 위의 HTTP 특징을 해결하기 위해, 즉 클라이언트를 인증을 유지하기 위해 사용합니다.

예를 들어, 쿠키와 세션을 사용하지 않으면 쇼핑몰에서 옷을 구매하려고 최초 로그인을 했음에도, 페이지를 이동할 때 마다 계속 로그인을 해야합니다.

서버는 클라이언트가 누군지 기억하지 않기 때문이죠.

이는 사용자의 접근성이 매우 떨어지는 요인이 됩니다.



쿠키와 세션을 사용했을 경우에는 최초 로그인을 하면 어떠한 방식에 의해서 서버가 그 사용자에 대한 인증을 유지하게 됩니다.

즉, 쿠키와 세션을 통해 서버는 클라이언트를 기억하고 있는것이죠.

이제 방금 말한 그 방식이 무엇인지 알아보도록 하겠습니다.









2. 쿠키 ( Cookie )

쿠키란, 클라이언트 측(브라우저)에서 관리되는 작은 기록 정보 파일을 의미합니다.

쿠키에는 사용자 인증이 유효한 시간을 명시할 수 있으며, 한 번 유효 시간이 정해지면 브라우저를 끄더라도 인증이 유지된다는 특징이 있습니다.



1) 쿠키 구성 요소

이름
각각의 쿠키를 구별하는 데 사용되는 이름
값
쿠키가 갖고 있는 값
유효시간
쿠키의 유지시간
도메인
쿠키를 전송할 도메인
경로
쿠키를 전송할 요청 경로




2) 쿠키 동작 방식

클라이언트가 페이지를 요청
서버에서 쿠키를 생성
HTTP 헤더에 쿠키를 포함 시켜 응답
브라우저가 종료되어도 쿠키 만료 기간이 있다면 클라이언트에서 보관하고 있음
쿠키가 존재하면 요청을 할 경우 HTTP 헤더에 쿠키를 함께 보내서 요청
서버에서 쿠키를 읽어 이전 상태 정보를 변경 할 필요가 있을 경우, 쿠키를 업데이트 하여 변경된 쿠키를 HTTP 헤더에 포함시켜 응답




3) 쿠키 사용 예

방문 사이트에서 로그인 시, "아이디와 비밀번호를 저장하시겠습니까?"
쇼핑몰의 장바구니 기능








3. 세션 ( Session )

세션은 쿠키를 기반으로 하고 있지만, 사용자 정보 파일을 브라우저에 저장하는 쿠키와 달리 세션은 서버 측에서 관리합니다.

서버에서는 클라이언트를 구분하기 위해 세션 ID를 부여하며 웹 브라우저가 서버에 접속해서 브라우저를 종료할 때까지 인증상태를 유지합니다.

물론 접속 시간에 제한을 두어 일정 시간 응답이 없다면 세션을 끊도록 설정이 가능 합니다.

사용자에 대한 정보를 서버에 저장하기 때문에 쿠키보다 보안에 좋지만, 사용자가 많아질수록 서버 메모리를 많이 차지하게 됩니다.

즉, 동접자 수가 많은 웹 사이트인 경우 서버에 과부하를 주게 되므로 성능 저하의 요인이 됩니다.





1) 세션의 동작 방식

클라이언트가 서버에 접속 시 세션 ID를 발급
클라이언트는 세션 ID에 대해 쿠키를 사용해서 저장 ( 이 때 쿠키 이름은 JSESSIONID이다. )
클라이언트가 서버에 다시 접속 시 이 쿠키를 이용해서 세션 ID 값을 서버에 전달


2) 세션의 특징

각 클라이언트에게 고유 ID를 부여
세션 ID로 클라이언트를 구분해서 클라이언트의 요구에 맞는 서비스를 제공
보안 면에서 쿠키보다 우수
사용자가 많아질수록 서버 메모리를 많이 차지하게 됨


3) 세션의 사용 예

로그인과 같이 보안상 중요한 작업을 수행할 때 사용









4. 쿠키와 세션의 차이

쿠키와 세션은 비슷한 역할을 하며, 동작원리도 비슷합니다

그 이유는 세션도 결국 쿠키를 사용하기 때문입니다.



가장 큰 차이점은 사용자의 기록 정보가 저장되는 위치입니다.

때문에 쿠키는 서버의 자원을 전혀 사용하지 않으며, 세션은 서버의 자원을 사용합니다.



또한 보안 면에서 세션이 더 우수하며, 요청 속도는 쿠키가 세션보다 더 빠른데, 그 이유는 세션의 경우 서버에서의 처리가 필요하기 때문입니다.
